#### **Example Verilog Code for Mealy FSM (Sequence Detector "10")**  
```verilog
module mealy_fsm (
    input wire clk,
    input wire rst,
    input wire X,
    output reg Z
);
    typedef enum reg {S0, S1} state_t;
    state_t state, next_state;

    always @(posedge clk or posedge rst) begin
        if (rst)
            state <= S0;
        else
            state <= next_state;
    end

    always @(*) begin
        case (state)
            S0: next_state = X ? S1 : S0;
            S1: next_state = X ? S1 : S0;
            default: next_state = S0;
        endcase
    end

    always @(*) begin
        Z = (state == S1 && X == 0) ? 1 : 0;
    end
endmodule
```

#### **Testbench Code**  
```verilog
module testbench;
    reg clk, rst, X;
    wire Z;
    
    mealy_fsm uut (.clk(clk), .rst(rst), .X(X), .Z(Z));
    
    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end
    
    initial begin
        $monitor("Time=%0t | X=%b | State=%b | Z=%b", $time, X, uut.state, Z);
        rst = 1; #10;
        rst = 0;
        X = 1; #10;
        X = 0; #10;
        X = 1; #10;
        X = 0; #10;
        X = 1; #10;
        X = 1; #10;
        $finish;
    end
endmodule
```

#### **Simulation Output (Console Log Example)**  
```
Time=0   | X=1 | State=S0 | Z=0  
Time=10  | X=1 | State=S1 | Z=0  
Time=20  | X=0 | State=S0 | Z=1  
Time=30  | X=1 | State=S1 | Z=0  
Time=40  | X=0 | State=S0 | Z=1  
```
